generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model role {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  role_code     String
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @updatedAt @db.Timestamptz(6)
  uuid          String?         @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  levels        level_role[]
  pricing_roles pricing_roles[]
  role_policy   role_policy[]

  @@map("roles")
}

model level {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  code          String
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @updatedAt @db.Timestamptz(6)
  uuid          String?         @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  rates         level_rate[]
  roles         level_role[]
  pricing_roles pricing_roles[]

  @@map("levels")
}

model level_role {
  level_id   Int      @map("level_id")
  role_id    Int      @map("role_id")
  created_at DateTime @default(now())
  level      level    @relation(fields: [level_id], references: [id], onDelete: Cascade)
  role       role     @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([level_id, role_id])
  @@map("level_roles")
}

model ratecard {
  id             Int          @id @default(autoincrement())
  name           String
  description    String
  effective_date DateTime
  expire_date    DateTime?
  created_at     DateTime     @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?    @updatedAt @db.Timestamptz(6)
  uuid           String?      @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  level_rates    level_rate[]
  pricings       pricings[]

  @@map("ratecards")
}

model level_rate {
  id           Int       @id @default(autoincrement())
  monthly_rate Decimal   @db.Decimal(10, 2)
  level_id     Int
  ratecard_id  Int       @map("ratecard_id")
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @updatedAt @db.Timestamptz(6)
  uuid         String?   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  level        level     @relation(fields: [level_id], references: [id], onDelete: Cascade)
  ratecard     ratecard  @relation(fields: [ratecard_id], references: [id], onDelete: Cascade)

  @@map("level_rates")
}

model org {
  id                Int        @id @default(autoincrement())
  created_at        DateTime?  @default(now()) @db.Timestamptz(6)
  name              String?
  country_id        Int?
  type              Int?       @db.SmallInt
  logo_url          String?
  slug              String?
  uuid              String?    @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  updated_at        DateTime?  @updatedAt @db.Timestamptz(6)
  status            Int?       @db.SmallInt
  tier_id           Int        @default(1)
  category_id       Int?
  plan_id           Int?
  verified_at       DateTime?
  business_address  String?
  business_licenses String[]
  linkedin_url      String?
  website           String?
  org_user          org_user[]
}

model org_user {
  org_id    Int
  user_uuid String? @db.Uuid
  role      String
  user_id   Int
  org       org     @relation(fields: [org_id], references: [id])
  user      user    @relation(fields: [user_id], references: [id])

  @@id([org_id, user_id])
}

model role_policy {
  id         Int       @id @default(autoincrement())
  role_id    Int
  name       String
  can_create Boolean   @default(false)
  can_read   Boolean   @default(false)
  can_update Boolean   @default(false)
  can_delete Boolean   @default(false)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @updatedAt @db.Timestamptz(6)
  metadata   Json?
  role       role      @relation(fields: [role_id], references: [id])
}

model user {
  created_at    DateTime?  @default(now()) @db.Timestamptz(6)
  status        Int?       @db.SmallInt
  wallets       String[]
  wallet_type   Int?
  attributes    Json?
  tokens        Json?
  xp            Json?
  profile       Json?
  role_id       Int[]
  org_id        Int[]
  updated_at    DateTime?  @updatedAt @db.Timestamptz(6)
  referred_by   String?
  is_registered Boolean?
  name          String?
  email         Json?      @db.Json
  password      String?
  phone         Json?      @db.Json
  avatar        String?
  username      String?
  uuid          String?    @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  id            Int        @id @default(autoincrement())
  first_name    String?
  last_name     String?
  org_user      org_user[]
}

model group {
  id          Int            @id(map: "groups_pkey") @default(autoincrement())
  name        String
  created_at  DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?      @updatedAt @db.Timestamptz(6)
  policy_ops  Json?          @db.Json
  policy_org  Json?          @db.Json
  role_policy group_policy[]
}

model group_policy {
  id         Int       @id @default(autoincrement())
  group_id   Int
  name       String
  can_create Boolean   @default(false)
  can_read   Boolean   @default(false)
  can_update Boolean   @default(false)
  can_delete Boolean   @default(false)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @updatedAt @db.Timestamptz(6)
  metadata   Json?
  group      group     @relation(fields: [group_id], references: [id])
}

model pricing_roles {
  id             Int      @id @default(autoincrement())
  uuid           String?  @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  pricing_id     Int
  role_id        Int
  level_id       Int
  quantity       Int
  base_price     Decimal  @db.Decimal(10, 2)
  override_price Decimal? @db.Decimal(10, 2)
  discount_rate  Decimal? @db.Decimal(5, 2)
  multiplier     Decimal  @db.Decimal(5, 2)
  final_price    Decimal  @db.Decimal(10, 2)
  levels         level    @relation(fields: [level_id], references: [id])
  pricings       pricings @relation(fields: [pricing_id], references: [id])
  roles          role     @relation(fields: [role_id], references: [id])
}

model pricings {
  id                Int             @id @default(autoincrement())
  uuid              String?         @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code              String          @unique
  description       String
  customer_id       String
  created_by        String
  created_at        DateTime        @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?       @db.Timestamptz(6)
  ratecard_id       Int
  total_amount      Decimal         @db.Decimal(10, 2)
  resource_count    Int
  overall_discounts Json?           @db.Json
  pricing_roles     pricing_roles[]
  ratecards         ratecard        @relation(fields: [ratecard_id], references: [id])
}

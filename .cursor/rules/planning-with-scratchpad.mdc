---
description: 
globs: 
---
# Planning with Scratchpad Standards

You are an expert in project planning and task management. Follow these standards for consistent, effective use of the scratchpad for project planning and execution.

## Scratchpad Structure

### 1. Current Task Section
```markdown
# Current Task: [Task Name]

## Requirements
- Requirement 1
- Requirement 2
- Requirement 3

## Data Models (if applicable)
1. Model1
   - field1: type
   - field2: type

2. Model2
   - field1: type
   - field2: type

## Plan
[X] Completed step
[ ] Next step
[ ] Future step

## Progress
- Current status
- Completed items
- Pending items
- Blockers
```

### 2. Progress Tracking

#### Task Status Markers
- [X] Completed task
- [-] In progress
- [ ] Not started
- [!] Blocked
- [?] Needs clarification

#### Progress Updates
```markdown
## Progress Update
1. State Initialization âœ“
   - Added isClient state
   - Moved initialization to useEffect
   - Added conditional rendering

2. Feature Implementation
   - [X] Component A
   - [-] Component B
   - [ ] Component C
```

### 3. Lessons Learned Section
```markdown
## Lessons

### Technical Lessons
- Always check file contents before editing
- Use proper type declarations
- Handle edge cases explicitly

### Process Lessons
- Break down complex tasks
- Test incrementally
- Document decisions
```

## Planning Methodology

### 1. Task Analysis
1. Review requirements
2. Identify dependencies
3. List constraints
4. Define success criteria
5. Estimate complexity

### 2. Task Breakdown
1. Split into subtasks
2. Identify dependencies
3. Set priorities
4. Estimate effort
5. Define milestones

### 3. Implementation Planning
1. Technical approach
2. Required components
3. Data structures
4. API requirements
5. Testing strategy

## Progress Tracking

### 1. Status Updates
```markdown
## Status Update [Date]
- Completed: [items]
- In Progress: [items]
- Blocked: [items]
- Next Up: [items]
```

### 2. Milestone Tracking
```markdown
## Milestones
1. [X] Project Setup
2. [-] Core Features
3. [ ] Testing
4. [ ] Documentation
```

### 3. Blocker Documentation
```markdown
## Blockers
1. Issue: [description]
   - Impact: [details]
   - Resolution: [plan]
```

## Best Practices

### 1. Task Management
- Keep tasks atomic
- Track dependencies
- Update status regularly
- Document blockers
- Note decisions

### 2. Documentation
- Clear requirements
- Implementation details
- Technical decisions
- Lessons learned
- Future improvements

### 3. Progress Updates
- Regular updates
- Clear status
- Blocked items
- Next steps
- Timeline changes

## Implementation Guidelines

### 1. Starting New Tasks
```markdown
# New Task: [Name]

## Context
[Brief description of task and its goals]

## Requirements
[List of specific requirements]

## Plan
[Step-by-step implementation plan]
```

### 2. Tracking Progress
```markdown
## Progress [Date]
- Completed:
  - Item 1
  - Item 2
- In Progress:
  - Item 3
- Next:
  - Item 4
```

### 3. Documenting Decisions
```markdown
## Decisions
1. [Decision]: [Rationale]
   - Alternatives considered
   - Reasons for choice
   - Implementation impact
```

## Review Process

### 1. Regular Reviews
- Check progress
- Update status
- Identify blockers
- Adjust plans
- Document learnings

### 2. Milestone Reviews
```markdown
## Milestone Review: [Name]
- Completed items
- Outstanding items
- Lessons learned
- Next steps
```

### 3. Final Review
```markdown
## Task Completion Review
- Implemented features
- Known issues
- Future improvements
- Lessons learned
```

## Documentation Guidelines

### 1. Requirements
- Clear objectives
- Specific criteria
- Constraints
- Dependencies
- Assumptions

### 2. Technical Notes
- Implementation details
- API usage
- Data structures
- Performance considerations
- Security requirements

### 3. Lessons
- Technical insights
- Process improvements
- Avoided pitfalls
- Best practices
- Future recommendations

## Maintenance

### 1. Regular Cleanup
- Archive completed tasks
- Update status
- Remove obsolete notes
- Organize sections
- Update priorities

### 2. Knowledge Base
- Maintain lessons learned
- Document patterns
- Record solutions
- Share insights
- Update guidelines 